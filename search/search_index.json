{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Introduction","text":"<p>Connectivly is an open-source OAuth and OIDC provider. It allows you to add OAuth to your existing app by adding a single callback.</p> <p>We have examples for the following languages (more in progress!)</p> <ul> <li> Python</li> </ul>"},{"location":"getting_started/","title":"Getting Started","text":"<p>Here's how to get started.</p>"},{"location":"getting_started/#1-import-connectivly-client","title":"1. Import Connectivly Client","text":"Python <p>Install the <code>connectivly-python</code> package from pip. </p> <pre><code>pip install connectivly-python\n</code></pre> app.py<pre><code>from connectivly import ConnectivlyClient\nconnectivly = ConnectivlyClient('API-KEY', 'BASE-URL')\n</code></pre>"},{"location":"getting_started/#2-create-callback","title":"2. Create Callback","text":"<p>Now create a callback URL for verifying a user's OAuth request. This route MUST be authenticated (the user must be logged in to be able to access it.)</p> <p>The user will be redirected to this route when they initiate the OAuth flow. It will will verify the user, approve (or deny) their request, and then redirect back to  Connectivly to finish the OAuth dance.</p> Python <p>This example uses Flask:</p> app.py<pre><code>@app.route('/connectivly')\n@login_required\ndef connectivly():\ntoken = request.args[\"token\"]\nsession = connectivly.get_login_session(token)\n# Logic to validate session: validate user, scopes, permissions\napproval = connectivly.approve_login_session(token)\nreturn redirect(approval['redirect_uri'])\n</code></pre>"},{"location":"getting_started/#3-protect-your-endpoints","title":"3. Protect your endpoints","text":"<p>After a user completes the OAuth flow, we want to be able to accept these  tokens for authentication.</p> <p>The <code>token</code> is a signed JWT that contains information about the user, app, and allowed scopes. You may use this to further make sure the user is allowed to access the resource.</p> Python app.py<pre><code>@app.route('/protected')\ndef protected():\nauth_header = request.headers.get('Authorization')\ntoken = connectivly.validate_token(auth_header)\nif token is None:\nreturn 'Unauthorized', 401\n# The token is a dict with information about the user (id, scopes, etc).\n# Use it to ensure they have permission to access this route.\nreturn 'Hello world!'\n</code></pre>"}]}